#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;
const char X = 'X';
const char O = 'O';
const char EMPTY = ' ';
const char TIE = 'T';
const char NO_ONE = 'N';
void instructions();
char askYesNo(string question);
int askNumber(string question,int high,int low = 0);
char humanPiece();
char opponent(char piece);
void displayBoard(const vector<char> &board);
char winner(const vector<char> &board);
bool isLegal(int move,const vector<char>& board);
int humanMove(const vector<char>&board, char human);
int computerMove(vector<char> board,char computer);
void announceWinner(char winner,char computer, char human);

int main(){
    int move;
    const int NUM_SQUARES = 9;
    vector<char> board(NUM_SQUARES,EMPTY);
    //shen ming you xi zhi nan
    instructions();
    char human = humanPiece();
    char computer = opponent(human);
    char turn = X;
    displayBoard(board);
    while(winner(board) == NO_ONE){
        if(turn == human){
            move = humanMove(board,human);
            board[move] = human;
        } else {
            move = computerMove(board,computer);
            board[move] = computer;
        }
        displayBoard(board);
        turn = opponent(turn);
    }
    announceWinner(winner(board),computer,human);
    return 0;
}

void instructions(){
    cout << "Welcome to the ultimete man-machine showdown:Tit-Tac-Toe.\n";
    cout << "--where human brain is pit against silicon processor\n\n";
    cout << "Make your move know by entering a number,0-8.The number\n\n";
    cout << " 0 | 1 | 2\n";
    cout << "----------\n";
    cout << " 3 | 4 | 5\n";
    cout << "----------\n";
    cout << " 6 | 7 | 8\n\n";
    cout << "Prepare your self, human .The battle is about to begin./n/n";
}
char humanPiece(){
    char go_first = askYesNo("Do you require the first move?(y/n)");
    if (go_first == 'y'){
        cout << "\nThen take the first move.You will need it\n";
        return X;
    } else {
        cout << "\nYour bravery will be your undoing...I will go first.\n";
        return O;
    }
}
char askYesNo(string question){
    char response;
    do {
        cout << question << "(y/n):";
        cin >> response;
    } while (response != 'y' && response != 'n');
    return response;
}
char opponent(char piece){
    if(piece == X){
        return O;
    } else {
        return X;
    }
}
void displayBoard(const vector<char> &board){
    cout << "\n\t" << board[0] << " | " << board[1] << " | " << board[2];
    cout << "\n\t" << "---------";
    cout << "\n\t" << board[3] << " | " << board[4] << " | " << board[5];
    cout << "\n\t" << "---------";
    cout << "\n\t" << board[6] << " | " << board[7] << " | " << board[8];
}
char winner(const vector<char> &board){
    const int WINNING_ROWS[8][3] = {{0,1,2},
                                    {3,4,5},
                                    {6,7,8},
                                    {0,3,6},
                                    {1,4,7},
                                    {2,5,8},
                                    {0,4,8},
                                    {2,4,6}};
    const int TOTAL_ROWS = 8;
    for (int row = 0;row < TOTAL_ROWS;++row)
    {
        //xun huan bian li shi fou you lian cheng yi xian
        if((board[WINNING_ROWS[row][0]] != EMPTY)
         && (board[WINNING_ROWS[row][0]] == board[WINNING_ROWS[row][1]])
         && (board[WINNING_ROWS[row][1]] == board[WINNING_ROWS[row][2]]))
        {
            return board[WINNING_ROWS[row][0]];
        }
    }
    if (count(board.begin(),board.end(),EMPTY) == 0){
        return TIE;
    }
    return NO_ONE;
}
int humanMove(const vector<char>&board,char human){
    int move = askNumber("Where will you move?",8,0);
    while (!isLegal(move, board))
    {
        cout << "/nThat square is already occupied,foolish human.\n";
        move = askNumber("Where will you move?",8,0);
    }
    cout << "Fine...\n";
    return move;
}
int computerMove(vector<char> board,char computer){
    unsigned int move = 0;
    bool found = false;
    //found wei false binqie board chang du xiao yu move
    while(!found && move < board.size()){
        if(isLegal(move, board)){
            board[move] = computer;
            // if winner is computer  found else !found
            found = winner(board) == computer;
            board[move] = EMPTY;
        }
        if(!found){
            ++move;
        }
    }
    //if bianli wan le meiyou zhao dao 
    if(!found){
        move = 0;
        //fan guo lai zhi xing
        //bianli ren lei you mei you yao sheng li de 
        //ru guo you bian tian jin qu
        char human = opponent(computer);
        while(!found && move < board.size()){
            if(isLegal(move, board)){
                board[move] = human;
                found = winner(board) == human;
                board[move] = EMPTY;
            }
            if(!found){
                ++move;
            }
        }
    }
    //ru guo ren lei ye mei you zhao dao
    //xun qiu zui you jie
    if (!found){
        move = 0;
        unsigned int i = 0;
        //zui you jie wei zhong jian > shangxiazuoyou > xiekezi
        const int BEST_MOVES[] = {4,0,2,6,8,1,3,5,7};
        while(!found && i < board.size()){
            move = BEST_MOVES[i];
            if(isLegal(move, board)){
                found = true;
            }
            ++i;
        }
    }
    cout << "I shall take square number" << move << endl;
    return move;
}
int askNumber(string quesition,int high,int low){
    int number;
    do {
        cout << quesition << " (" << low << " - " << high << " ): ";
        cin >> number;
        cout << number << "\n";
        cout << "high: " << high << "\n";
        cout << "low: " << low << "\n";
    } while (number > high || number < low);
    return number;
}
inline bool isLegal(int move,const vector<char>& board){
    return (board[move] == EMPTY);
}
void announceWinner(char winner,char computer,char human){
    if(winner == computer){
        cout << winner << "'s won!\n";
    } else if (winner == human){
        cout << winner << "'s won!\n";
    } else {
        cout << "It's tie\n";
    }
}
